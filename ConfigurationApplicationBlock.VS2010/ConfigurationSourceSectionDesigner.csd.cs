//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18444
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18444
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Configuration;

namespace SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration
{
    /// <summary>
    /// 用于配置<see cref="ConfigurationSection"/>的源。
    /// </summary>
    public partial class ConfigurationSourceElement : ConfigurationElement
    {
        #region IsReadOnly override
        /// <summary>
        /// 验证此配置元素是否只读。
        /// </summary>
        /// <returns>是否只读。</returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion

        #region Name
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        private const string NamePropertyName = "sectionName";

        /// <summary>
        /// 自定义<see cref="ConfigurationSection"/>的标识名称。
        /// </summary>
        /// <value>设置或获取自定义<see cref="ConfigurationSection"/>的标识名称。</value>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [Description("自定义ConfigurationSection的标识名称。")]
        [ConfigurationProperty(ConfigurationSourceElement.NamePropertyName, IsRequired = true, IsKey = true, IsDefaultCollection = false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[ConfigurationSourceElement.NamePropertyName]));
            }
            set
            {
                base[ConfigurationSourceElement.NamePropertyName] = value;
            }
        }
        #endregion

        #region Path
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        private const string PathPropertyName = "sourcePath";

        /// <summary>
        /// 配置源文件路径。
        /// </summary>
        /// <value>设置或获取配置源文件路径。</value>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [Description("配置源文件路径。")]
        [ConfigurationProperty(ConfigurationSourceElement.PathPropertyName, IsRequired = true, IsKey = false, IsDefaultCollection = false)]
        public virtual string Path
        {
            get
            {
                return ((string)(base[ConfigurationSourceElement.PathPropertyName]));
            }
            set
            {
                base[ConfigurationSourceElement.PathPropertyName] = value;
            }
        }
        #endregion

        #region AspNetCompatibilitySupportProperties
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        private const string AspNetCompatibilitySupportPropertiesPropertyName = "aspnetCompatibilitySupportProperties";

        /// <summary>
        /// 对ASP.NET的兼容性支持属性。
        /// </summary>
        /// <value>设置或获取对ASP.NET的兼容性支持属性。</value>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [Description("对ASP.NET的兼容性支持属性.")]
        [ConfigurationProperty(ConfigurationSourceElement.AspNetCompatibilitySupportPropertiesPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
        public virtual AspCompatiblePropertyElement AspNetCompatibilitySupportProperties
        {
            get
            {
                return ((AspCompatiblePropertyElement)(base[ConfigurationSourceElement.AspNetCompatibilitySupportPropertiesPropertyName]));
            }
            set
            {
                base[ConfigurationSourceElement.AspNetCompatibilitySupportPropertiesPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration
{
    /// <summary>
    /// <see cref="ConfigurationSourceElement"/>集合。
    /// </summary>
    [ConfigurationCollection(
        typeof(ConfigurationSourceElement),
        CollectionType = ConfigurationElementCollectionType.BasicMap,
        AddItemName = ConfigurationSourceElementCollection.ConfigurationSourceElementPropertyName)]
    public sealed partial class ConfigurationSourceElementCollection : ConfigurationElementCollection
    {
        #region Constants
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        private const string ConfigurationSourceElementPropertyName = "add";
        #endregion

        #region Overrides

        #region CollectionType
        /// <summary>
        /// <see cref="ConfigurationElementCollectionType"/>中的一个值。
        /// </summary>
        /// <value>获取<see cref="ConfigurationElementCollectionType"/>中的一个值。</value>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return ConfigurationElementCollectionType.BasicMap;
            }
        }
        #endregion

        #region ElementName
        /// <summary>
        /// 此集合中每个<see cref="ConfigurationSourceElement"/>元素关联的XML元素名称。
        /// </summary>
        /// <value>获取此集合中每个<see cref="ConfigurationSourceElement"/>元素关联的XML元素名称。</value>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override string ElementName
        {
            get
            {
                return ConfigurationSourceElementCollection.ConfigurationSourceElementPropertyName;
            }
        }
        #endregion

        #region IsElementName
        /// <summary>
        /// 验证<paramref name="elementName"/>是否为指定的元素名称。
        /// </summary>
        /// <param name="elementName">元素名称。</param>
        /// <returns>是否等于add。</returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == ConfigurationSourceElementCollection.ConfigurationSourceElementPropertyName);
        }
        #endregion

        #region GetElementKey
        /// <summary>
        /// 获取元素的标识名称。
        /// </summary>
        /// <param name="element"><see cref="ConfigurationSourceElement"/>对象实例。</param>
        /// <returns>add配置节中的sectionName属性值。</returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override object GetElementKey(ConfigurationElement element)
        {
            return ((ConfigurationSourceElement)(element)).Name;
        }
        #endregion

        #region CreateNewElement
        /// <summary>
        /// 创建一个<see cref="ConfigurationSourceElement"/>对象实例。
        /// </summary>
        /// <returns><see cref="ConfigurationSourceElement"/>对象实例。</returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override ConfigurationElement CreateNewElement()
        {
            return new ConfigurationSourceElement();
        }
        #endregion

        #endregion

        #region Indexer
        /// <summary>
        /// 获取指定索引<paramref name="index"/>处的<see cref="ConfigurationSourceElement"/>对象实例。
        /// </summary>
        /// <param name="index">索引数字。</param>
        /// <returns><see cref="ConfigurationSourceElement"/>对象实例。</returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public ConfigurationSourceElement this[int index]
        {
            get
            {
                return ((ConfigurationSourceElement)(base.BaseGet(index)));
            }
        }

        /// <summary>
        /// 获取指定标识名称<paramref name="sectionName"/>的<see cref="ConfigurationSourceElement"/>对象实例。
        /// </summary>
        /// <param name="sectionName">标识名称。</param>
        /// <returns><see cref="ConfigurationSourceElement"/>对象实例。</returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public ConfigurationSourceElement this[object sectionName]
        {
            get
            {
                return ((ConfigurationSourceElement)(base.BaseGet(sectionName)));
            }
        }
        #endregion

        #region Add
        /// <summary>
        /// 添加<paramref name="element"/>到集合中。
        /// </summary>
        /// <param name="element"><see cref="ConfigurationSourceElement"/>对象实例。</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Add(ConfigurationSourceElement element)
        {
            base.BaseAdd(element);
        }
        #endregion

        #region Remove
        /// <summary>
        /// 从此集合中移除<paramref name="element"/>。
        /// </summary>
        /// <param name="element"><see cref="ConfigurationSourceElement"/>对象实例。</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Remove(ConfigurationSourceElement element)
        {
            this.Remove(element.Name);
        }

        /// <summary>
        /// 从此集合中移除标识名称为<paramref name="name"/>的<see cref="ConfigurationSourceElement"/>对象实例。
        /// </summary>
        /// <param name="name">标识名称。</param>
        public void Remove(string name)
        {
            base.BaseRemove(name);
        }
        #endregion

        #region RemoveAt
        /// <summary>
        /// 从此集合中移除指定索引<paramref name="index"/>处的<see cref="ConfigurationSourceElement"/>对象实例。
        /// </summary>
        /// <param name="index">索引数字。</param>
        public void RemoveAt(int index)
        {
            this.BaseRemoveAt(index);
        }
        #endregion

        #region IsReadOnly override
        /// <summary>
        /// 验证此集合是否只读。
        /// </summary>
        /// <returns>是否只读。</returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion

        #region Clear
        /// <summary>
        /// 清空此集合。
        /// </summary>
        public void Clear()
        {
            this.BaseClear();
        }
        #endregion
    }
}
namespace SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration
{
    /// <summary>
    /// 用于配置<see cref="ConfigurationSection"/>的源文件信息。
    /// </summary>
    public partial class ConfigurationSourceSection : ConfigurationSection
    {
        #region SectionName
        /// <summary>
        /// 此自定义配置节的名称。
        /// </summary>
        public const string SectionName = "sourcepro.configurationSource";
        #endregion

        #region Xmlns
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        private const string XmlnsPropertyName = "xmlns";

        /// <summary>
        /// 此配置节的XML命名空间。
        /// </summary>
        /// <value>获取此配置节的XML命名空间。</value>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [ConfigurationProperty(ConfigurationSourceSection.XmlnsPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[ConfigurationSourceSection.XmlnsPropertyName]));
            }
        }
        #endregion

        #region IsReadOnly override
        /// <summary>
        /// 验证此配置节是否只读。
        /// </summary>
        /// <returns>是否只读。</returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion

        #region Sources
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        private const string SourcesPropertyName = "";

        /// <summary>
        /// <see cref="ConfigurationSourceElementCollection"/>的相关配置。
        /// </summary>
        /// <value>设置或获取<see cref="ConfigurationSourceElementCollection"/>的相关配置。</value>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [Description("ConfigurationSourceElementCollection配置。")]
        [ConfigurationProperty(ConfigurationSourceSection.SourcesPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = true)]
        public virtual ConfigurationSourceElementCollection Sources
        {
            get
            {
                return ((ConfigurationSourceElementCollection)(base[ConfigurationSourceSection.SourcesPropertyName]));
            }
            set
            {
                base[ConfigurationSourceSection.SourcesPropertyName] = value;
            }
        }
        #endregion
    }
}

namespace SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration
{
    /// <summary>
    /// 提供兼容ASP.NET的属性配置。
    /// </summary>
    public partial class AspCompatiblePropertyElement : ConfigurationElement
    {
        #region IsReadOnly override
        /// <summary>
        /// 验证此配置元素是否只读。
        /// </summary>
        /// <returns>是否只读。</returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region VirtualDirectory
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        private const string VirtualDirectoryPropertyName = "virtualDirectory";
        
        /// <summary>
        /// 为自定义配置文件指定的虚拟目录。
        /// </summary>
        /// <value>设置或获取为自定义配置文件指定的虚拟目录。</value>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [Description("为自定义配置文件指定的虚拟目录。")]
        [ConfigurationProperty(AspCompatiblePropertyElement.VirtualDirectoryPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false, DefaultValue="PrivateConfigs")]
        public virtual string VirtualDirectory
        {
            get
            {
                return ((string)(base[AspCompatiblePropertyElement.VirtualDirectoryPropertyName]));
            }
            set
            {
                base[AspCompatiblePropertyElement.VirtualDirectoryPropertyName] = value;
            }
        }
        #endregion
    }
}
