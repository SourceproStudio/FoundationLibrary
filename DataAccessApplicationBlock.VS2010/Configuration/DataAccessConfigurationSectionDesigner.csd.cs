//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18444
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration
{
    
    
    /// <summary>
    /// 用于配置数据库属性保护器类型。
    /// </summary>
    public partial class DatabasePropertyProtectionElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets 属性保护器名称。
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("属性保护器名称。")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabasePropertyProtectionElement.NamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabasePropertyProtectionElement.NamePropertyName]));
            }
            set
            {
                base[global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabasePropertyProtectionElement.NamePropertyName] = value;
            }
        }
        #endregion
        
        #region Type Property
        /// <summary>
        /// The XML name of the <see cref="Type"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string TypePropertyName = "type";
        
        /// <summary>
        /// Gets or sets 实现了IDatabasePropertyProtection接口的类型。
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("实现了IDatabasePropertyProtection接口的类型。")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabasePropertyProtectionElement.TypePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Type
        {
            get
            {
                return ((string)(base[global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabasePropertyProtectionElement.TypePropertyName]));
            }
            set
            {
                base[global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabasePropertyProtectionElement.TypePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration
{
    
    
    /// <summary>
    /// DatabasePropertyProtectionElement集合。
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabasePropertyProtectionElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMap, AddItemName=global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabasePropertyProtectionElementCollection.DatabasePropertyProtectionElementPropertyName)]
    public sealed partial class DatabasePropertyProtectionElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabasePropertyProtectionElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string DatabasePropertyProtectionElementPropertyName = "add";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMap;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override string ElementName
        {
            get
            {
                return global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabasePropertyProtectionElementCollection.DatabasePropertyProtectionElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabasePropertyProtectionElementCollection.DatabasePropertyProtectionElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabasePropertyProtectionElement)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabasePropertyProtectionElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabasePropertyProtectionElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabasePropertyProtectionElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabasePropertyProtectionElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabasePropertyProtectionElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabasePropertyProtectionElement this[int index]
        {
            get
            {
                return ((global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabasePropertyProtectionElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabasePropertyProtectionElement"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabasePropertyProtectionElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabasePropertyProtectionElement this[object name]
        {
            get
            {
                return ((global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabasePropertyProtectionElement)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabasePropertyProtectionElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="add">The <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabasePropertyProtectionElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Add(global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabasePropertyProtectionElement add)
        {
            base.BaseAdd(add);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabasePropertyProtectionElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="add">The <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabasePropertyProtectionElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Remove(global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabasePropertyProtectionElement add)
        {
            base.BaseRemove(this.GetElementKey(add));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration
{
    
    
    /// <summary>
    /// 数据库属性保护器配置。
    /// </summary>
    public partial class DatabasePropertyProtectionSection : global::System.Configuration.ConfigurationSection
    {
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabasePropertyProtectionSection.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabasePropertyProtectionSection.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Protections Property
        /// <summary>
        /// The XML name of the <see cref="Protections"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string ProtectionsPropertyName = "";
        
        /// <summary>
        /// Gets or sets 数据库属性保护器配置。
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("数据库属性保护器配置。")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabasePropertyProtectionSection.ProtectionsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=true)]
        public virtual global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabasePropertyProtectionElementCollection Protections
        {
            get
            {
                return ((global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabasePropertyProtectionElementCollection)(base[global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabasePropertyProtectionSection.ProtectionsPropertyName]));
            }
            set
            {
                base[global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabasePropertyProtectionSection.ProtectionsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration
{
    
    
    /// <summary>
    /// 用于配置数据库访问组件类型。
    /// </summary>
    public partial class DatabaseAccessProviderElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets 数据库访问组件名称。
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("数据库访问组件名称。")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseAccessProviderElement.NamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseAccessProviderElement.NamePropertyName]));
            }
            set
            {
                base[global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseAccessProviderElement.NamePropertyName] = value;
            }
        }
        #endregion
        
        #region Type Property
        /// <summary>
        /// The XML name of the <see cref="Type"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string TypePropertyName = "type";
        
        /// <summary>
        /// Gets or sets 实现了IDatabase接口的类型。
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("实现了IDatabase接口的类型。")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseAccessProviderElement.TypePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Type
        {
            get
            {
                return ((string)(base[global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseAccessProviderElement.TypePropertyName]));
            }
            set
            {
                base[global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseAccessProviderElement.TypePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration
{
    
    
    /// <summary>
    /// DatabaseAccessProviderElement集合。
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseAccessProviderElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMap, AddItemName=global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseAccessProviderElementCollection.DatabaseAccessProviderElementPropertyName)]
    public sealed partial class DatabaseAccessProviderElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseAccessProviderElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string DatabaseAccessProviderElementPropertyName = "add";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMap;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override string ElementName
        {
            get
            {
                return global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseAccessProviderElementCollection.DatabaseAccessProviderElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseAccessProviderElementCollection.DatabaseAccessProviderElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseAccessProviderElement)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseAccessProviderElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseAccessProviderElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseAccessProviderElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseAccessProviderElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseAccessProviderElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseAccessProviderElement this[int index]
        {
            get
            {
                return ((global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseAccessProviderElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseAccessProviderElement"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseAccessProviderElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseAccessProviderElement this[object name]
        {
            get
            {
                return ((global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseAccessProviderElement)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseAccessProviderElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="add">The <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseAccessProviderElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Add(global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseAccessProviderElement add)
        {
            base.BaseAdd(add);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseAccessProviderElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="add">The <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseAccessProviderElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Remove(global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseAccessProviderElement add)
        {
            base.BaseRemove(this.GetElementKey(add));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration
{
    
    
    /// <summary>
    /// 数据库访问组件配置。
    /// </summary>
    public partial class DatabaseAccessProviderSection : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the DatabaseAccessProviderSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string DatabaseAccessProviderSectionSectionName = "databaseProviders";
        
        /// <summary>
        /// Gets the DatabaseAccessProviderSection instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public static global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseAccessProviderSection Instance
        {
            get
            {
                return ((global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseAccessProviderSection)(global::System.Configuration.ConfigurationManager.GetSection(global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseAccessProviderSection.DatabaseAccessProviderSectionSectionName)));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Providers Property
        /// <summary>
        /// The XML name of the <see cref="Providers"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string ProvidersPropertyName = "";
        
        /// <summary>
        /// Gets or sets 数据库组件配置。
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("数据库组件配置。")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseAccessProviderSection.ProvidersPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=true)]
        public virtual global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseAccessProviderElementCollection Providers
        {
            get
            {
                return ((global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseAccessProviderElementCollection)(base[global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseAccessProviderSection.ProvidersPropertyName]));
            }
            set
            {
                base[global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseAccessProviderSection.ProvidersPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration
{
    
    
    /// <summary>
    /// 用于配置经过保护的数据库属性。
    /// </summary>
    public partial class IsProtectedDatabasePropertyElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region PropertyName Property
        /// <summary>
        /// The XML name of the <see cref="PropertyName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string PropertyNamePropertyName = "propertyName";
        
        /// <summary>
        /// Gets or sets 被保护的属性名称。
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("被保护的属性名称。")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.IsProtectedDatabasePropertyElement.PropertyNamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string PropertyName
        {
            get
            {
                return ((string)(base[global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.IsProtectedDatabasePropertyElement.PropertyNamePropertyName]));
            }
            set
            {
                base[global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.IsProtectedDatabasePropertyElement.PropertyNamePropertyName] = value;
            }
        }
        #endregion
        
        #region ProtectedValue Property
        /// <summary>
        /// The XML name of the <see cref="ProtectedValue"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string ProtectedValuePropertyName = "protectedValue";
        
        /// <summary>
        /// Gets or sets 经过保护的属性值。
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("经过保护的属性值。")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.IsProtectedDatabasePropertyElement.ProtectedValuePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string ProtectedValue
        {
            get
            {
                return ((string)(base[global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.IsProtectedDatabasePropertyElement.ProtectedValuePropertyName]));
            }
            set
            {
                base[global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.IsProtectedDatabasePropertyElement.ProtectedValuePropertyName] = value;
            }
        }
        #endregion
        
        #region ProtectionName Property
        /// <summary>
        /// The XML name of the <see cref="ProtectionName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string ProtectionNamePropertyName = "protectionName";
        
        /// <summary>
        /// Gets or sets 属性保护器名称。
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("属性保护器名称。")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.IsProtectedDatabasePropertyElement.ProtectionNamePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string ProtectionName
        {
            get
            {
                return ((string)(base[global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.IsProtectedDatabasePropertyElement.ProtectionNamePropertyName]));
            }
            set
            {
                base[global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.IsProtectedDatabasePropertyElement.ProtectionNamePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration
{
    
    
    /// <summary>
    /// IsProtectedDatabasePropertyElement集合。
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.IsProtectedDatabasePropertyElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMap, AddItemName=global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.IsProtectedDatabasePropertyElementCollection.IsProtectedDatabasePropertyElementPropertyName)]
    public sealed partial class IsProtectedDatabasePropertyElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.IsProtectedDatabasePropertyElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string IsProtectedDatabasePropertyElementPropertyName = "add";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMap;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override string ElementName
        {
            get
            {
                return global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.IsProtectedDatabasePropertyElementCollection.IsProtectedDatabasePropertyElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.IsProtectedDatabasePropertyElementCollection.IsProtectedDatabasePropertyElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.IsProtectedDatabasePropertyElement)(element)).PropertyName;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.IsProtectedDatabasePropertyElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.IsProtectedDatabasePropertyElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.IsProtectedDatabasePropertyElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.IsProtectedDatabasePropertyElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.IsProtectedDatabasePropertyElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.IsProtectedDatabasePropertyElement this[int index]
        {
            get
            {
                return ((global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.IsProtectedDatabasePropertyElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.IsProtectedDatabasePropertyElement"/> with the specified key.
        /// </summary>
        /// <param name="propertyName">The key of the <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.IsProtectedDatabasePropertyElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.IsProtectedDatabasePropertyElement this[object propertyName]
        {
            get
            {
                return ((global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.IsProtectedDatabasePropertyElement)(base.BaseGet(propertyName)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.IsProtectedDatabasePropertyElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="add">The <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.IsProtectedDatabasePropertyElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Add(global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.IsProtectedDatabasePropertyElement add)
        {
            base.BaseAdd(add);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.IsProtectedDatabasePropertyElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="add">The <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.IsProtectedDatabasePropertyElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Remove(global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.IsProtectedDatabasePropertyElement add)
        {
            base.BaseRemove(this.GetElementKey(add));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration
{
    
    
    /// <summary>
    /// 数据库连接配置。
    /// </summary>
    public partial class DatabaseConnectionElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets 数据库名称。
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("数据库名称。")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElement.NamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElement.NamePropertyName]));
            }
            set
            {
                base[global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElement.NamePropertyName] = value;
            }
        }
        #endregion
        
        #region ConnectionString Property
        /// <summary>
        /// The XML name of the <see cref="ConnectionString"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string ConnectionStringPropertyName = "connectionString";
        
        /// <summary>
        /// Gets or sets 数据库连接串。
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("数据库连接串。")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElement.ConnectionStringPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string ConnectionString
        {
            get
            {
                return ((string)(base[global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElement.ConnectionStringPropertyName]));
            }
            set
            {
                base[global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElement.ConnectionStringPropertyName] = value;
            }
        }
        #endregion
        
        #region DefaultSechema Property
        /// <summary>
        /// The XML name of the <see cref="DefaultSechema"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string DefaultSechemaPropertyName = "defaultSechema";
        
        /// <summary>
        /// Gets or sets 默认架构名称。
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("默认架构名称。")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElement.DefaultSechemaPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue="dbo")]
        public virtual string DefaultSechema
        {
            get
            {
                return ((string)(base[global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElement.DefaultSechemaPropertyName]));
            }
            set
            {
                base[global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElement.DefaultSechemaPropertyName] = value;
            }
        }
        #endregion
        
        #region CommandTimeoutSeconds Property
        /// <summary>
        /// The XML name of the <see cref="CommandTimeoutSeconds"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string CommandTimeoutSecondsPropertyName = "commandTimeoutSeconds";
        
        /// <summary>
        /// Gets or sets 数据库命令执行超时秒数。
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("数据库命令执行超时秒数。")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElement.CommandTimeoutSecondsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=0)]
        public virtual int CommandTimeoutSeconds
        {
            get
            {
                return ((int)(base[global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElement.CommandTimeoutSecondsPropertyName]));
            }
            set
            {
                base[global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElement.CommandTimeoutSecondsPropertyName] = value;
            }
        }
        #endregion
        
        #region Provider Property
        /// <summary>
        /// The XML name of the <see cref="Provider"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string ProviderPropertyName = "provider";
        
        /// <summary>
        /// Gets or sets 数据库访问器名称。
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("数据库访问器名称。")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElement.ProviderPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Provider
        {
            get
            {
                return ((string)(base[global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElement.ProviderPropertyName]));
            }
            set
            {
                base[global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElement.ProviderPropertyName] = value;
            }
        }
        #endregion
        
        #region Protections Property
        /// <summary>
        /// The XML name of the <see cref="Protections"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string ProtectionsPropertyName = "protections";
        
        /// <summary>
        /// Gets or sets 需要保护的数据库属性。
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("需要保护的数据库属性。")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElement.ProtectionsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.IsProtectedDatabasePropertyElementCollection Protections
        {
            get
            {
                return ((global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.IsProtectedDatabasePropertyElementCollection)(base[global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElement.ProtectionsPropertyName]));
            }
            set
            {
                base[global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElement.ProtectionsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration
{
    
    
    /// <summary>
    /// DatabaseConnectionElement集合。
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMap, AddItemName=global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElementCollection.DatabaseConnectionElementPropertyName)]
    public sealed partial class DatabaseConnectionElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string DatabaseConnectionElementPropertyName = "add";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMap;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override string ElementName
        {
            get
            {
                return global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElementCollection.DatabaseConnectionElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElementCollection.DatabaseConnectionElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElement)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElement this[int index]
        {
            get
            {
                return ((global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElement"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElement this[object name]
        {
            get
            {
                return ((global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElement)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="add">The <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Add(global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElement add)
        {
            base.BaseAdd(add);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="add">The <see cref="global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Remove(global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElement add)
        {
            base.BaseRemove(this.GetElementKey(add));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration
{
    
    
    /// <summary>
    /// 数据库连接配置。
    /// </summary>
    public partial class DatabaseConnectionSection : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the DatabaseConnectionSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string DatabaseConnectionSectionSectionName = "databaseConnections";
        
        /// <summary>
        /// Gets the DatabaseConnectionSection instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public static global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionSection Instance
        {
            get
            {
                return ((global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionSection)(global::System.Configuration.ConfigurationManager.GetSection(global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionSection.DatabaseConnectionSectionSectionName)));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Connections Property
        /// <summary>
        /// The XML name of the <see cref="Connections"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string ConnectionsPropertyName = "";
        
        /// <summary>
        /// Gets or sets 数据库连接配置。
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("数据库连接配置。")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionSection.ConnectionsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=true)]
        public virtual global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElementCollection Connections
        {
            get
            {
                return ((global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionElementCollection)(base[global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionSection.ConnectionsPropertyName]));
            }
            set
            {
                base[global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DatabaseConnectionSection.ConnectionsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration
{
    
    
    /// <summary>
    /// 数据库默认选项配置。
    /// </summary>
    public partial class DefaultDatabaseOptionsSection : global::System.Configuration.ConfigurationSection
    {
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DefaultDatabaseOptionsSection.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DefaultDatabaseOptionsSection.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region DefaultDatabaseConnection Property
        /// <summary>
        /// The XML name of the <see cref="DefaultDatabaseConnection"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string DefaultDatabaseConnectionPropertyName = "defaultDatabaseConnection";
        
        /// <summary>
        /// Gets or sets 默认的数据库连接名称。
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("默认的数据库连接名称。")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DefaultDatabaseOptionsSection.DefaultDatabaseConnectionPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string DefaultDatabaseConnection
        {
            get
            {
                return ((string)(base[global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DefaultDatabaseOptionsSection.DefaultDatabaseConnectionPropertyName]));
            }
            set
            {
                base[global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DefaultDatabaseOptionsSection.DefaultDatabaseConnectionPropertyName] = value;
            }
        }
        #endregion
        
        #region DefaultDatabaseProvider Property
        /// <summary>
        /// The XML name of the <see cref="DefaultDatabaseProvider"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string DefaultDatabaseProviderPropertyName = "defaultDatabaseProvider";
        
        /// <summary>
        /// Gets or sets 默认的数据库访问器。
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("默认的数据库访问器。")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DefaultDatabaseOptionsSection.DefaultDatabaseProviderPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string DefaultDatabaseProvider
        {
            get
            {
                return ((string)(base[global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DefaultDatabaseOptionsSection.DefaultDatabaseProviderPropertyName]));
            }
            set
            {
                base[global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DefaultDatabaseOptionsSection.DefaultDatabaseProviderPropertyName] = value;
            }
        }
        #endregion
        
        #region DefaultDatabaseProtection Property
        /// <summary>
        /// The XML name of the <see cref="DefaultDatabaseProtection"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string DefaultDatabaseProtectionPropertyName = "defaultDatabaseProtection";
        
        /// <summary>
        /// Gets or sets 默认的数据库属性保护器。
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("默认的数据库属性保护器。")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DefaultDatabaseOptionsSection.DefaultDatabaseProtectionPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string DefaultDatabaseProtection
        {
            get
            {
                return ((string)(base[global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DefaultDatabaseOptionsSection.DefaultDatabaseProtectionPropertyName]));
            }
            set
            {
                base[global::SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration.DefaultDatabaseOptionsSection.DefaultDatabaseProtectionPropertyName] = value;
            }
        }
        #endregion
    }
}
