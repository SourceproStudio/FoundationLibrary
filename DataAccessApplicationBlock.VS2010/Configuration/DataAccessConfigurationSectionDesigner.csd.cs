//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18444
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System.Configuration;
using System.CodeDom.Compiler;
using System.ComponentModel;

namespace SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration
{
    /// <summary>
    /// 用于配置数据库属性保护器类型。
    /// </summary>
    /// <seealso cref="ConfigurationElement"/>
    public partial class DatabasePropertyProtectionElement : ConfigurationElement
    {
        #region IsReadOnly override
        /// <summary>
        /// 获取此配置元素是否只读。
        /// </summary>
        /// <returns>是否只读。</returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion

        #region Name Property
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        private const string NamePropertyName = "name";

        /// <summary>
        /// 属性保护器名称。
        /// </summary>
        /// <value>设置或获取属性保护器名称。</value>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [Description("属性保护器名称。")]
        [ConfigurationProperty(DatabasePropertyProtectionElement.NamePropertyName, IsRequired = true, IsKey = true, IsDefaultCollection = false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[DatabasePropertyProtectionElement.NamePropertyName]));
            }
            set
            {
                base[DatabasePropertyProtectionElement.NamePropertyName] = value;
            }
        }
        #endregion

        #region Type Property
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        private const string TypePropertyName = "type";

        /// <summary>
        /// 实现了<see cref="SourcePro.Csharp.Practices.FoundationLibrary.Data.IDatabasePropertyProtection"/>接口的类型。
        /// </summary>
        /// <value>设置或获取实现了<see cref="SourcePro.Csharp.Practices.FoundationLibrary.Data.IDatabasePropertyProtection"/>接口的类型。</value>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [Description("实现了IDatabasePropertyProtection接口的类型。")]
        [ConfigurationProperty(DatabasePropertyProtectionElement.TypePropertyName, IsRequired = true, IsKey = false, IsDefaultCollection = false)]
        public virtual string Type
        {
            get
            {
                return ((string)(base[DatabasePropertyProtectionElement.TypePropertyName]));
            }
            set
            {
                base[DatabasePropertyProtectionElement.TypePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration
{
    /// <summary>
    /// <see cref="DatabasePropertyProtectionElement"/>集合。
    /// </summary>
    /// <seealso cref="DatabasePropertyProtectionElement"/>
    /// <seealso cref="ConfigurationElementCollection"/>
    /// <seealso cref="ConfigurationElementCollectionType"/>
    [ConfigurationCollection(
        typeof(DatabasePropertyProtectionElement), 
        CollectionType = ConfigurationElementCollectionType.BasicMap, 
        AddItemName = DatabasePropertyProtectionElementCollection.DatabasePropertyProtectionElementPropertyName)]
    public sealed partial class DatabasePropertyProtectionElementCollection : ConfigurationElementCollection
    {
        #region Constants
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        private const string DatabasePropertyProtectionElementPropertyName = "add";
        #endregion

        #region Overrides

        #region CollectionType
        /// <summary>
        /// 此集合的<see cref="ConfigurationElementCollectionType"/>值。
        /// </summary>
        /// <value>获取此集合的<see cref="ConfigurationElementCollectionType"/>值。</value>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return ConfigurationElementCollectionType.BasicMap;
            }
        }
        #endregion

        #region ElementName
        /// <summary>
        /// 集合中每个元素的名称。
        /// </summary>
        /// <value>获取集合中每个元素的名称。</value>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override string ElementName
        {
            get
            {
                return DatabasePropertyProtectionElementCollection.DatabasePropertyProtectionElementPropertyName;
            }
        }
        #endregion

        #region IsElementName
        /// <summary>
        /// 验证<paramref name="elementName"/>是否等于add。
        /// </summary>
        /// <param name="elementName">需要验证的元素名称。</param>
        /// <returns>true or false。</returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == DatabasePropertyProtectionElementCollection.DatabasePropertyProtectionElementPropertyName);
        }
        #endregion

        #region GetElementKey
        /// <summary>
        /// 获取<paramref name="element"/>的标识名称。
        /// </summary>
        /// <param name="element"><see cref="DatabasePropertyProtectionElement"/>对象实例。</param>
        /// <returns><see cref="DatabasePropertyProtectionElement"/>.Name属性。</returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override object GetElementKey(ConfigurationElement element)
        {
            return ((DatabasePropertyProtectionElement)(element)).Name;
        }
        #endregion

        #region CreateNewElement
        /// <summary>
        /// 创建一个新的<see cref="DatabasePropertyProtectionElement"/>对象实例。
        /// </summary>
        /// <returns><see cref="DatabasePropertyProtectionElement"/>对象实例。</returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override ConfigurationElement CreateNewElement()
        {
            return new DatabasePropertyProtectionElement();
        }
        #endregion

        #endregion

        #region Indexer
        /// <summary>
        /// 获取指定索引处的<see cref="DatabasePropertyProtectionElement"/>对象实例。
        /// </summary>
        /// <param name="index">索引数字。</param>
        /// <returns><see cref="DatabasePropertyProtectionElement"/>对象实例。</returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public DatabasePropertyProtectionElement this[int index]
        {
            get
            {
                return ((DatabasePropertyProtectionElement)(base.BaseGet(index)));
            }
        }

        /// <summary>
        /// 获取指定名称的<see cref="DatabasePropertyProtectionElement"/>对象实例。
        /// </summary>
        /// <param name="name">标识名称。</param>
        /// <returns><see cref="DatabasePropertyProtectionElement"/>对象实例。</returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public DatabasePropertyProtectionElement this[object name]
        {
            get
            {
                return ((DatabasePropertyProtectionElement)(base.BaseGet(name)));
            }
        }
        #endregion

        #region Add
        /// <summary>
        /// 添加<paramref name="element"/>到此集合中。
        /// </summary>
        /// <param name="element"><see cref="DatabasePropertyProtectionElement"/>对象实例。</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Add(DatabasePropertyProtectionElement element)
        {
            base.BaseAdd(element);
        }
        #endregion

        #region Remove
        /// <summary>
        /// 移除指定名称的<see cref="DatabasePropertyProtectionElement"/>元素。
        /// </summary>
        /// <param name="name">指定的名称。</param>
        public void Remove(string name)
        {
            base.BaseRemove(name);
        }

        /// <summary>
        /// 移除元素<paramref name="element"/>。
        /// </summary>
        /// <param name="element"><see cref="DatabasePropertyProtectionElement"/>对象实例。</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Remove(DatabasePropertyProtectionElement element)
        {
            this.Remove(element.Name);
        }
        #endregion

        #region RemoveAt
        /// <summary>
        /// 移除指定索引处的<see cref="DatabasePropertyProtectionElement"/>元素。
        /// </summary>
        /// <param name="index">索引数字。</param>
        public void RemoveAt(int index)
        {
            base.BaseRemoveAt(index);
        }
        #endregion

        #region IsReadOnly override
        /// <summary>
        /// 获取此配置元素是否只读。
        /// </summary>
        /// <returns>true or false。</returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration
{
    /// <summary>
    /// 数据库属性保护器配置。
    /// </summary>
    /// <seealso cref="ConfigurationSection"/>
    public partial class DatabasePropertyProtectionSection : ConfigurationSection
    {
        #region SectionName
        /// <summary>
        /// <see cref="DatabasePropertyProtectionSection"/>配置节名称。
        /// </summary>
        public const string SectionName = "databaseProtections";
        #endregion

        #region Xmlns Property
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        private const string XmlnsPropertyName = "xmlns";

        /// <summary>
        /// 配置节对应的XML命名空间。
        /// </summary>
        /// <value>获取配置节对应的XML命名空间。</value>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [ConfigurationProperty(DatabasePropertyProtectionSection.XmlnsPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[DatabasePropertyProtectionSection.XmlnsPropertyName]));
            }
        }
        #endregion

        #region IsReadOnly override
        /// <summary>
        /// 获取此配置元素是否只读。
        /// </summary>
        /// <returns>true or false。</returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion

        #region Protections Property
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        private const string ProtectionsPropertyName = "";

        /// <summary>
        /// 数据库属性保护器配置。
        /// </summary>
        /// <value>设置或获取数据库属性保护器配置。</value>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [Description("数据库属性保护器配置。")]
        [ConfigurationProperty(DatabasePropertyProtectionSection.ProtectionsPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = true)]
        public virtual DatabasePropertyProtectionElementCollection Protections
        {
            get
            {
                return ((DatabasePropertyProtectionElementCollection)(base[DatabasePropertyProtectionSection.ProtectionsPropertyName]));
            }
            set
            {
                base[DatabasePropertyProtectionSection.ProtectionsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration
{
    /// <summary>
    /// 用于配置数据库访问组件类型。
    /// </summary>
    /// <seealso cref="ConfigurationElement"/>
    public partial class DatabaseAccessProviderElement : ConfigurationElement
    {
        #region IsReadOnly override
        /// <summary>
        /// 获取此配置元素是否只读。
        /// </summary>
        /// <returns>true or false。</returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion

        #region Name Property
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        private const string NamePropertyName = "name";

        /// <summary>
        /// 数据库访问组件名称。
        /// </summary>
        /// <value>设置或获取数据库访问组件名称。</value>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [Description("数据库访问组件名称。")]
        [ConfigurationProperty(DatabaseAccessProviderElement.NamePropertyName, IsRequired = true, IsKey = true, IsDefaultCollection = false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[DatabaseAccessProviderElement.NamePropertyName]));
            }
            set
            {
                base[DatabaseAccessProviderElement.NamePropertyName] = value;
            }
        }
        #endregion

        #region Type Property
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        private const string TypePropertyName = "type";

        /// <summary>
        /// 实现了<see cref="SourcePro.Csharp.Practices.FoundationLibrary.Data.IDatabase"/>接口的类型。
        /// </summary>
        /// <value>设置或获取实现了<see cref="SourcePro.Csharp.Practices.FoundationLibrary.Data.IDatabase"/>接口的类型。</value>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [Description("实现了IDatabase接口的类型。")]
        [ConfigurationProperty(DatabaseAccessProviderElement.TypePropertyName, IsRequired = true, IsKey = false, IsDefaultCollection = false)]
        public virtual string Type
        {
            get
            {
                return ((string)(base[DatabaseAccessProviderElement.TypePropertyName]));
            }
            set
            {
                base[DatabaseAccessProviderElement.TypePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration
{
    /// <summary>
    /// <see cref="DatabaseAccessProviderElement"/>集合。
    /// </summary>
    /// <seealso cref="DatabaseAccessProviderElement"/>
    /// <seealso cref="ConfigurationElementCollection"/>
    /// <seealso cref="ConfigurationElementCollectionType"/>
    [ConfigurationCollection(typeof(DatabaseAccessProviderElement), CollectionType = ConfigurationElementCollectionType.BasicMap, AddItemName = DatabaseAccessProviderElementCollection.DatabaseAccessProviderElementPropertyName)]
    public sealed partial class DatabaseAccessProviderElementCollection : ConfigurationElementCollection
    {
        #region Constants
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        private const string DatabaseAccessProviderElementPropertyName = "add";
        #endregion

        #region Overrides

        #region CollectionType
        /// <summary>
        /// 此集合的<see cref="ConfigurationElementCollectionType"/>值。
        /// </summary>
        /// <value>获取此集合的<see cref="ConfigurationElementCollectionType"/>值。</value>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return ConfigurationElementCollectionType.BasicMap;
            }
        }
        #endregion

        #region ElementName
        /// <summary>
        /// 集合中每个元素的名称。
        /// </summary>
        /// <value>获取集合中每个元素的名称。</value>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override string ElementName
        {
            get
            {
                return DatabaseAccessProviderElementCollection.DatabaseAccessProviderElementPropertyName;
            }
        }
        #endregion

        #region IsElementName
        /// <summary>
        /// 验证<paramref name="elementName"/>是否等于add。
        /// </summary>
        /// <param name="elementName">需要验证的元素名称。</param>
        /// <returns>true or false。</returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == DatabaseAccessProviderElementCollection.DatabaseAccessProviderElementPropertyName);
        }
        #endregion

        #region GetElementKey
        /// <summary>
        /// 获取<paramref name="element"/>的键值。
        /// </summary>
        /// <param name="element"><see cref="DatabaseAccessProviderElement"/>对象实例。</param>
        /// <returns><see cref="DatabaseAccessProviderElement"/>.Name属性值。</returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override object GetElementKey(ConfigurationElement element)
        {
            return ((DatabaseAccessProviderElement)(element)).Name;
        }
        #endregion

        #region CreateNewElement
        /// <summary>
        /// 创建一个新的<see cref="DatabaseAccessProviderElement"/>对象实例。
        /// </summary>
        /// <returns><see cref="DatabaseAccessProviderElement"/>对象实例。</returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override ConfigurationElement CreateNewElement()
        {
            return new DatabaseAccessProviderElement();
        }
        #endregion

        #endregion

        #region Indexer
        /// <summary>
        /// 获取指定索引处的<see cref="DatabaseAccessProviderElement"/>对象实例。
        /// </summary>
        /// <param name="index">索引数字。</param>
        /// <returns><see cref="DatabaseAccessProviderElement"/>对象实例。</returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public DatabaseAccessProviderElement this[int index]
        {
            get
            {
                return ((DatabaseAccessProviderElement)(base.BaseGet(index)));
            }
        }

        /// <summary>
        /// 获取指定名称的<see cref="DatabaseAccessProviderElement"/>对象实例。
        /// </summary>
        /// <param name="name">标识名称。</param>
        /// <returns><see cref="DatabaseAccessProviderElement"/>对象实例。</returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public DatabaseAccessProviderElement this[object name]
        {
            get
            {
                return ((DatabaseAccessProviderElement)(base.BaseGet(name)));
            }
        }
        #endregion

        #region Add
        /// <summary>
        /// 添加<paramref name="element"/>到集合中。
        /// </summary>
        /// <param name="element"><see cref="DatabaseAccessProviderElement"/>对象实例。</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Add(DatabaseAccessProviderElement element)
        {
            base.BaseAdd(element);
        }
        #endregion

        #region Remove
        /// <summary>
        /// 移除指定名称的<see cref="DatabaseAccessProviderElement"/>对象实例。
        /// </summary>
        /// <param name="name">标识名称。</param>
        public void Remove(string name)
        {
            base.BaseRemove(name);
        }

        /// <summary>
        /// 从此集合中移除<paramref name="element"/>。
        /// </summary>
        /// <param name="element"><see cref="DatabaseAccessProviderElement"/>对象实例。</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Remove(DatabaseAccessProviderElement element)
        {
            this.Remove(element.Name);
        }
        #endregion

        #region RemoveAt
        /// <summary>
        /// 移除指定索引处的<see cref="DatabaseAccessProviderElement"/>对象实例。
        /// </summary>
        /// <param name="index">索引数字。</param>
        public void RemoveAt(int index)
        {
            this.RemoveAt(index);
        }
        #endregion

        #region IsReadOnly override
        /// <summary>
        /// 获取此配置元素是否只读。
        /// </summary>
        /// <returns>true or false。</returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration
{
    /// <summary>
    /// 数据库访问组件配置。
    /// </summary>
    /// <seealso cref="ConfigurationSection"/>
    public partial class DatabaseAccessProviderSection : ConfigurationSection
    {
        #region SectionName
        /// <summary>
        /// <see cref="DatabaseAccessProviderSection"/>配置节名称。
        /// </summary>
        public const string SectionName = "databaseProviders";
        #endregion

        #region Xmlns Property
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        private const string XmlnsPropertyName = "xmlns";

        /// <summary>
        /// 此配置节的XML命名空间。
        /// </summary>
        /// <value>获取此配置节的XML命名空间。</value>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [ConfigurationProperty(DatabaseAccessProviderSection.XmlnsPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[DatabaseAccessProviderSection.XmlnsPropertyName]));
            }
        }
        #endregion

        #region IsReadOnly override
        /// <summary>
        /// 获取此配置节是否只读。
        /// </summary>
        /// <returns>true or false。</returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion

        #region Providers Property
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        private const string ProvidersPropertyName = "";

        /// <summary>
        /// 数据库组件配置。
        /// </summary>
        /// <value>设置或获取数据库组件配置。</value>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [Description("数据库组件配置。")]
        [ConfigurationProperty(DatabaseAccessProviderSection.ProvidersPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = true)]
        public virtual DatabaseAccessProviderElementCollection Providers
        {
            get
            {
                return ((DatabaseAccessProviderElementCollection)(base[DatabaseAccessProviderSection.ProvidersPropertyName]));
            }
            set
            {
                base[DatabaseAccessProviderSection.ProvidersPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration
{
    /// <summary>
    /// 用于配置经过保护的数据库属性。
    /// </summary>
    /// <seealso cref="ConfigurationElement"/>
    public partial class IsProtectedDatabasePropertyElement : ConfigurationElement
    {
        #region IsReadOnly override
        /// <summary>
        /// 获取此配置元素是否只读。
        /// </summary>
        /// <returns>true or false。</returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion

        #region PropertyName Property
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        private const string PropertyNamePropertyName = "propertyName";

        /// <summary>
        /// 被保护的属性名称。
        /// </summary>
        /// <value>设置或获取被保护的属性名称。</value>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [Description("被保护的属性名称。")]
        [ConfigurationProperty(IsProtectedDatabasePropertyElement.PropertyNamePropertyName, IsRequired = true, IsKey = true, IsDefaultCollection = false)]
        public virtual string PropertyName
        {
            get
            {
                return ((string)(base[IsProtectedDatabasePropertyElement.PropertyNamePropertyName]));
            }
            set
            {
                base[IsProtectedDatabasePropertyElement.PropertyNamePropertyName] = value;
            }
        }
        #endregion

        #region ProtectedValue Property
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        private const string ProtectedValuePropertyName = "protectedValue";

        /// <summary>
        /// 经过保护的属性值。
        /// </summary>
        /// <value>设置或获取经过保护的属性值。</value>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [Description("经过保护的属性值。")]
        [ConfigurationProperty(IsProtectedDatabasePropertyElement.ProtectedValuePropertyName, IsRequired = true, IsKey = false, IsDefaultCollection = false)]
        public virtual string ProtectedValue
        {
            get
            {
                return ((string)(base[IsProtectedDatabasePropertyElement.ProtectedValuePropertyName]));
            }
            set
            {
                base[IsProtectedDatabasePropertyElement.ProtectedValuePropertyName] = value;
            }
        }
        #endregion

        #region ProtectionName Property
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        private const string ProtectionNamePropertyName = "protectionName";

        /// <summary>
        /// 属性保护器名称。
        /// </summary>
        /// <value>设置或获取属性保护器名称。</value>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [Description("属性保护器名称。")]
        [ConfigurationProperty(IsProtectedDatabasePropertyElement.ProtectionNamePropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
        public virtual string ProtectionName
        {
            get
            {
                return ((string)(base[IsProtectedDatabasePropertyElement.ProtectionNamePropertyName]));
            }
            set
            {
                base[IsProtectedDatabasePropertyElement.ProtectionNamePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration
{
    /// <summary>
    /// <see cref="IsProtectedDatabasePropertyElement"/>集合。
    /// </summary>
    /// <seealso cref="IsProtectedDatabasePropertyElement"/>
    /// <seealso cref="ConfigurationElementCollection"/>
    /// <seealso cref="ConfigurationElementCollectionType"/>
    [ConfigurationCollection(typeof(IsProtectedDatabasePropertyElement), CollectionType = ConfigurationElementCollectionType.BasicMap, AddItemName = IsProtectedDatabasePropertyElementCollection.IsProtectedDatabasePropertyElementPropertyName)]
    public sealed partial class IsProtectedDatabasePropertyElementCollection : ConfigurationElementCollection
    {
        #region Constants
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        private const string IsProtectedDatabasePropertyElementPropertyName = "add";
        #endregion

        #region Overrides

        #region CollectionType
        /// <summary>
        /// 此集合的<see cref="ConfigurationElementCollectionType"/>值。
        /// </summary>
        /// <value>获取此集合的<see cref="ConfigurationElementCollectionType"/>值。</value>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return ConfigurationElementCollectionType.BasicMap;
            }
        }
        #endregion

        #region ElementName
        /// <summary>
        /// 集合中每个元素的名称。
        /// </summary>
        /// <value>获取集合中每个元素的名称。</value>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override string ElementName
        {
            get
            {
                return IsProtectedDatabasePropertyElementCollection.IsProtectedDatabasePropertyElementPropertyName;
            }
        }
        #endregion

        /// <summary>
        /// Indicates whether the specified <see cref="ConfigurationElement"/> exists in the <see cref="ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == IsProtectedDatabasePropertyElementCollection.IsProtectedDatabasePropertyElementPropertyName);
        }

        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="ConfigurationElement"/>.
        /// </returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override object GetElementKey(ConfigurationElement element)
        {
            return ((IsProtectedDatabasePropertyElement)(element)).PropertyName;
        }

        /// <summary>
        /// Creates a new <see cref="IsProtectedDatabasePropertyElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="IsProtectedDatabasePropertyElement"/>.
        /// </returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override ConfigurationElement CreateNewElement()
        {
            return new IsProtectedDatabasePropertyElement();
        }
        #endregion

        #region Indexer
        /// <summary>
        /// Gets the <see cref="IsProtectedDatabasePropertyElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="IsProtectedDatabasePropertyElement"/> to retrieve.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public IsProtectedDatabasePropertyElement this[int index]
        {
            get
            {
                return ((IsProtectedDatabasePropertyElement)(base.BaseGet(index)));
            }
        }

        /// <summary>
        /// Gets the <see cref="IsProtectedDatabasePropertyElement"/> with the specified key.
        /// </summary>
        /// <param name="propertyName">The key of the <see cref="IsProtectedDatabasePropertyElement"/> to retrieve.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public IsProtectedDatabasePropertyElement this[object propertyName]
        {
            get
            {
                return ((IsProtectedDatabasePropertyElement)(base.BaseGet(propertyName)));
            }
        }
        #endregion

        #region Add
        /// <summary>
        /// Adds the specified <see cref="IsProtectedDatabasePropertyElement"/> to the <see cref="ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="add">The <see cref="IsProtectedDatabasePropertyElement"/> to add.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Add(IsProtectedDatabasePropertyElement add)
        {
            base.BaseAdd(add);
        }
        #endregion

        #region Remove
        /// <summary>
        /// Removes the specified <see cref="IsProtectedDatabasePropertyElement"/> from the <see cref="ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="add">The <see cref="IsProtectedDatabasePropertyElement"/> to remove.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Remove(IsProtectedDatabasePropertyElement add)
        {
            base.BaseRemove(this.GetElementKey(add));
        }
        #endregion

        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration
{


    /// <summary>
    /// 数据库连接配置。
    /// </summary>
    public partial class DatabaseConnectionElement : ConfigurationElement
    {

        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion

        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        private const string NamePropertyName = "name";

        /// <summary>
        /// 数据库名称。
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [Description("数据库名称。")]
        [ConfigurationProperty(DatabaseConnectionElement.NamePropertyName, IsRequired = true, IsKey = true, IsDefaultCollection = false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[DatabaseConnectionElement.NamePropertyName]));
            }
            set
            {
                base[DatabaseConnectionElement.NamePropertyName] = value;
            }
        }
        #endregion

        #region ConnectionString Property
        /// <summary>
        /// The XML name of the <see cref="ConnectionString"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        private const string ConnectionStringPropertyName = "connectionString";

        /// <summary>
        /// 数据库连接串。
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [Description("数据库连接串。")]
        [ConfigurationProperty(DatabaseConnectionElement.ConnectionStringPropertyName, IsRequired = true, IsKey = false, IsDefaultCollection = false)]
        public virtual string ConnectionString
        {
            get
            {
                return ((string)(base[DatabaseConnectionElement.ConnectionStringPropertyName]));
            }
            set
            {
                base[DatabaseConnectionElement.ConnectionStringPropertyName] = value;
            }
        }
        #endregion

        #region DefaultSechema Property
        /// <summary>
        /// The XML name of the <see cref="DefaultSechema"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        private const string DefaultSechemaPropertyName = "defaultSechema";

        /// <summary>
        /// 默认架构名称。
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [Description("默认架构名称。")]
        [ConfigurationProperty(DatabaseConnectionElement.DefaultSechemaPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false, DefaultValue = "dbo")]
        public virtual string DefaultSechema
        {
            get
            {
                return ((string)(base[DatabaseConnectionElement.DefaultSechemaPropertyName]));
            }
            set
            {
                base[DatabaseConnectionElement.DefaultSechemaPropertyName] = value;
            }
        }
        #endregion

        #region CommandTimeoutSeconds Property
        /// <summary>
        /// The XML name of the <see cref="CommandTimeoutSeconds"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        private const string CommandTimeoutSecondsPropertyName = "commandTimeoutSeconds";

        /// <summary>
        /// 数据库命令执行超时秒数。
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [Description("数据库命令执行超时秒数。")]
        [ConfigurationProperty(DatabaseConnectionElement.CommandTimeoutSecondsPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false, DefaultValue = 0)]
        public virtual int CommandTimeoutSeconds
        {
            get
            {
                return ((int)(base[DatabaseConnectionElement.CommandTimeoutSecondsPropertyName]));
            }
            set
            {
                base[DatabaseConnectionElement.CommandTimeoutSecondsPropertyName] = value;
            }
        }
        #endregion

        #region Provider Property
        /// <summary>
        /// The XML name of the <see cref="Provider"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        private const string ProviderPropertyName = "provider";

        /// <summary>
        /// 数据库访问器名称。
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [Description("数据库访问器名称。")]
        [ConfigurationProperty(DatabaseConnectionElement.ProviderPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
        public virtual string Provider
        {
            get
            {
                return ((string)(base[DatabaseConnectionElement.ProviderPropertyName]));
            }
            set
            {
                base[DatabaseConnectionElement.ProviderPropertyName] = value;
            }
        }
        #endregion

        #region Protections Property
        /// <summary>
        /// The XML name of the <see cref="Protections"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        private const string ProtectionsPropertyName = "protections";

        /// <summary>
        /// 需要保护的数据库属性。
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [Description("需要保护的数据库属性。")]
        [ConfigurationProperty(DatabaseConnectionElement.ProtectionsPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
        public virtual IsProtectedDatabasePropertyElementCollection Protections
        {
            get
            {
                return ((IsProtectedDatabasePropertyElementCollection)(base[DatabaseConnectionElement.ProtectionsPropertyName]));
            }
            set
            {
                base[DatabaseConnectionElement.ProtectionsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration
{


    /// <summary>
    /// DatabaseConnectionElement集合。
    /// </summary>
    [ConfigurationCollection(typeof(DatabaseConnectionElement), CollectionType = ConfigurationElementCollectionType.BasicMap, AddItemName = DatabaseConnectionElementCollection.DatabaseConnectionElementPropertyName)]
    public sealed partial class DatabaseConnectionElementCollection : ConfigurationElementCollection
    {

        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="DatabaseConnectionElement"/> instances in this collection.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        private const string DatabaseConnectionElementPropertyName = "add";
        #endregion

        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="ConfigurationElementCollectionType"/> of this collection.</returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return ConfigurationElementCollectionType.BasicMap;
            }
        }

        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override string ElementName
        {
            get
            {
                return DatabaseConnectionElementCollection.DatabaseConnectionElementPropertyName;
            }
        }

        /// <summary>
        /// Indicates whether the specified <see cref="ConfigurationElement"/> exists in the <see cref="ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == DatabaseConnectionElementCollection.DatabaseConnectionElementPropertyName);
        }

        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="ConfigurationElement"/>.
        /// </returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override object GetElementKey(ConfigurationElement element)
        {
            return ((DatabaseConnectionElement)(element)).Name;
        }

        /// <summary>
        /// Creates a new <see cref="DatabaseConnectionElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="DatabaseConnectionElement"/>.
        /// </returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override ConfigurationElement CreateNewElement()
        {
            return new DatabaseConnectionElement();
        }
        #endregion

        #region Indexer
        /// <summary>
        /// Gets the <see cref="DatabaseConnectionElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="DatabaseConnectionElement"/> to retrieve.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public DatabaseConnectionElement this[int index]
        {
            get
            {
                return ((DatabaseConnectionElement)(base.BaseGet(index)));
            }
        }

        /// <summary>
        /// Gets the <see cref="DatabaseConnectionElement"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="DatabaseConnectionElement"/> to retrieve.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public DatabaseConnectionElement this[object name]
        {
            get
            {
                return ((DatabaseConnectionElement)(base.BaseGet(name)));
            }
        }
        #endregion

        #region Add
        /// <summary>
        /// Adds the specified <see cref="DatabaseConnectionElement"/> to the <see cref="ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="add">The <see cref="DatabaseConnectionElement"/> to add.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Add(DatabaseConnectionElement add)
        {
            base.BaseAdd(add);
        }
        #endregion

        #region Remove
        /// <summary>
        /// Removes the specified <see cref="DatabaseConnectionElement"/> from the <see cref="ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="add">The <see cref="DatabaseConnectionElement"/> to remove.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Remove(DatabaseConnectionElement add)
        {
            base.BaseRemove(this.GetElementKey(add));
        }
        #endregion

        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration
{


    /// <summary>
    /// 数据库连接配置。
    /// </summary>
    public partial class DatabaseConnectionSection : ConfigurationSection
    {

        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        private const string XmlnsPropertyName = "xmlns";

        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [ConfigurationProperty(DatabaseConnectionSection.XmlnsPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[DatabaseConnectionSection.XmlnsPropertyName]));
            }
        }
        #endregion

        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion

        #region Connections Property
        /// <summary>
        /// The XML name of the <see cref="Connections"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        private const string ConnectionsPropertyName = "";

        /// <summary>
        /// 数据库连接配置。
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [Description("数据库连接配置。")]
        [ConfigurationProperty(DatabaseConnectionSection.ConnectionsPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = true)]
        public virtual DatabaseConnectionElementCollection Connections
        {
            get
            {
                return ((DatabaseConnectionElementCollection)(base[DatabaseConnectionSection.ConnectionsPropertyName]));
            }
            set
            {
                base[DatabaseConnectionSection.ConnectionsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace SourcePro.Csharp.Practices.FoundationLibrary.Commons.Configuration
{


    /// <summary>
    /// 数据库默认选项配置。
    /// </summary>
    public partial class DefaultDatabaseOptionsSection : ConfigurationSection
    {

        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        private const string XmlnsPropertyName = "xmlns";

        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [ConfigurationProperty(DefaultDatabaseOptionsSection.XmlnsPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[DefaultDatabaseOptionsSection.XmlnsPropertyName]));
            }
        }
        #endregion

        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion

        #region DefaultDatabaseConnection Property
        /// <summary>
        /// The XML name of the <see cref="DefaultDatabaseConnection"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        private const string DefaultDatabaseConnectionPropertyName = "defaultDatabaseConnection";

        /// <summary>
        /// 默认的数据库连接名称。
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [Description("默认的数据库连接名称。")]
        [ConfigurationProperty(DefaultDatabaseOptionsSection.DefaultDatabaseConnectionPropertyName, IsRequired = true, IsKey = false, IsDefaultCollection = false)]
        public virtual string DefaultDatabaseConnection
        {
            get
            {
                return ((string)(base[DefaultDatabaseOptionsSection.DefaultDatabaseConnectionPropertyName]));
            }
            set
            {
                base[DefaultDatabaseOptionsSection.DefaultDatabaseConnectionPropertyName] = value;
            }
        }
        #endregion

        #region DefaultDatabaseProvider Property
        /// <summary>
        /// The XML name of the <see cref="DefaultDatabaseProvider"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        private const string DefaultDatabaseProviderPropertyName = "defaultDatabaseProvider";

        /// <summary>
        /// 默认的数据库访问器。
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [Description("默认的数据库访问器。")]
        [ConfigurationProperty(DefaultDatabaseOptionsSection.DefaultDatabaseProviderPropertyName, IsRequired = true, IsKey = false, IsDefaultCollection = false)]
        public virtual string DefaultDatabaseProvider
        {
            get
            {
                return ((string)(base[DefaultDatabaseOptionsSection.DefaultDatabaseProviderPropertyName]));
            }
            set
            {
                base[DefaultDatabaseOptionsSection.DefaultDatabaseProviderPropertyName] = value;
            }
        }
        #endregion

        #region DefaultDatabaseProtection Property
        /// <summary>
        /// The XML name of the <see cref="DefaultDatabaseProtection"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        private const string DefaultDatabaseProtectionPropertyName = "defaultDatabaseProtection";

        /// <summary>
        /// 默认的数据库属性保护器。
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [Description("默认的数据库属性保护器。")]
        [ConfigurationProperty(DefaultDatabaseOptionsSection.DefaultDatabaseProtectionPropertyName, IsRequired = true, IsKey = false, IsDefaultCollection = false)]
        public virtual string DefaultDatabaseProtection
        {
            get
            {
                return ((string)(base[DefaultDatabaseOptionsSection.DefaultDatabaseProtectionPropertyName]));
            }
            set
            {
                base[DefaultDatabaseOptionsSection.DefaultDatabaseProtectionPropertyName] = value;
            }
        }
        #endregion
    }
}
